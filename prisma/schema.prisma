generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum Role {
    USER
    ADMIN
}

model User {
    id       String   @id @default(cuid())
    kindUserId String @unique
    email    String   @unique
    name     String?
    profilePicture  String?
    role     Role     @default(USER)
    StripeId String?
    reviews  Review[]
    ratings  Rating[]
    wishlists Wishlist[]
    carts    Cart[]
    shippingDetails ShippingDetails[]
    orders   Order[]

    banned   Boolean  @default(false)
    bannedAt DateTime?
    bannedReason String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([id, kindUserId, email]) // Index for searching by id or kindUserId or email
}

model Category {
    id        String   @id @default(cuid())
    name      String   @unique
    description String?
    products  Product[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([id, name]) // Index for searching by id or name
}

model Product {
    id          String   @id @default(cuid())
    name        String
    description String
    price       Float
    discount    Float?
    stock       Int
    image       String
    categoryId  String
    active      Boolean @default(true)
    rating      Float?
    reviews     Review[]
    ratings     Rating[]
    wishlists   Wishlist[]
    carts       Cart[]

    category    Category @relation(fields: [categoryId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([id, name, categoryId]) // Index for searching by id or name or categoryId
}

model Wishlist {
    id        String   @id @default(cuid())
    userId    String
    productId String
    product   Product @relation(fields: [productId], references: [id])
    user      User    @relation(fields: [userId], references: [kindUserId])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([id, userId, productId]) // Index for searching by id or userId or productId
}

model Cart {
    id        String   @id @default(cuid())
    userId    String
    productId String
    quantity  Int
    product   Product @relation(fields: [productId], references: [id])
    user      User    @relation(fields: [userId], references: [kindUserId])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([id, userId, productId]) // Index for searching by id or userId or productId
}

model Review {
    id        String   @id @default(cuid())
    productId String
    userId    String
    comment   String
    ratingAmount    Int // Rating amount from 1 to 5

    product   Product @relation(fields: [productId], references: [id])
    user      User    @relation(fields: [userId], references: [kindUserId])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([id, productId, userId]) // Index for searching by id or productId or userId
}

enum OrderStatus {
    PENDING
    PROCESSING
    SHIPPED
    DELIVERED
    CANCELLED
}

model Order {
    id          String   @id @default(cuid())
    userId      String
    productIds   String[]
    quantity    Int
    totalAmount Float
    status      OrderStatus @default(PENDING)
    isPaid      Boolean @default(false)
    shippingDetails ShippingDetails[]

    user        User    @relation(fields: [userId], references: [kindUserId])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([id, userId]) // Index for searching by id or userId or productId
}

model ShippingDetails {
    id          String   @id @default(cuid())
    userId      String
    orderId     String
    firstName  String
    lastName String
    address String
    city String
    state String
    zip String
    country String
    phone String

    user      User    @relation(fields: [userId], references: [kindUserId])
    order     Order   @relation(fields: [orderId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([id, userId, orderId]) // Index for searching by id or userId or orderId
}














//! don't use this Rating model in the database, instead use the Review model
model Rating {
    id        String   @id @default(cuid())
    productId String
    userId    String
    ratingAmount    Int // Rating amount from 1 to 5

    product   Product @relation(fields: [productId], references: [id])
    user      User    @relation(fields: [userId], references: [kindUserId])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([id, productId, userId]) // Index for searching by id or productId or userId
}